# Copyright 2016 The Cockroach Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

# clusterctl is a helper script for manually managing test clusters. Key
# features include simple creation and resizing of test clusters, pushing
# of new binaries to an already running cluster, and SSH'ing into various
# machines in the cluster.
#
# To use this script, you'll need CC_PREFIX set in your environment. This
# variable is used to name your Terraform state file and is prepended to all
# resource names (e.g. host names) generated by Terraform.
#
# For example, this resizes a cluster to 3 nodes, creating the cluster if it
# doesn't already exist:
#
#   CC_PREFIX=cdo-crazytest ./clusterctl resize 3
#
# Here are some more examples, all of which assume that you've exported
# the CC_PREFIX environment variable appropriately.
#
# SSH into node 1:
#
#   ./clusterctl ssh_node 1
#
# Push new cockcoach binary and restart cluster:
#
#   ./clusterctl push_cockroach /path/to/linux/cockroach/binary
#
# Start photos load (we always create the load generation machine, so this
# simply starts the photos app):
#
#   ./clusterctl start_photos
#
# Download archived stores from Google Cloud Storage to all nodes in cluster:
#
#   ./clusterctl stop_cockroach
#   ./clusterctl download_stores gs://cockroach-test/allocatortest/crazy-test-data
#   ./clusterctl start_cockroach
#
#   This downloads stores to the 3 nodes in the cluster. The URL is expected to
#   be a directory containing 1 or more .tgz files, each containing the contents
#   of a store directory. In this case, the individual stores are at these URLs:
#
#     gs://cockroach-test/allocatortest/crazy-test-data/store1.tgz
#     gs://cockroach-test/allocatortest/crazy-test-data/store2.tgz
#     gs://cockroach-test/allocatortest/crazy-test-data/store3.tgz
#
# Upload all stores to a Google Cloud Storage:
#
#   ./clusterctl stop_cockroach
#   ./clusterctl upload_stores gs://cockroach-test/allocatortest/crazy-test-data

set -euo pipefail

die() {
  echo $* >&2
  exit 1
}

readonly GCS_URL="gs://cockroach-test/allocatortest"
readonly GCS_TEMP_URL="gs://cockroach-test/allocatortest/temp"
readonly GCLOUD_SSH_KEY="${HOME}/.ssh/google_compute_engine"
readonly DSH_ARGS="-r ssh -Mc -o -q -o -oStrictHostKeyChecking=no -o -i${HOME}/.ssh/google_compute_engine"
readonly SCP_FLAGS="-q -oStrictHostKeyChecking=no -i${HOME}/.ssh/google_compute_engine"
readonly SSH_FLAGS="${SCP_FLAGS}"
readonly PSSH_FLAGS="--inline -X -oStrictHostKeyChecking=no -X -q -X -i${HOME}/.ssh/google_compute_engine -l ubuntu"
readonly PSSH="$(which pssh 2>/dev/null || which parallel-ssh 2>/dev/null || /bin/true)"

readonly OUTVAR_COCKROACH_IPS="instances"
readonly OUTVAR_BLOCK_WRITER_IPS="example_block_writer"
readonly TERRAFORM_DIR="${GOPATH}/src/github.com/cockroachdb/cockroach/acceptance/allocator_terraform"

verify_environment() {
  which terraform >/dev/null 2>&1 || die "Couldn't find terraform in your PATH"
  which gcloud >/dev/null 2>&1 || die "Couldn't find gcloud. Is the Google Cloud SDK installed?"
  which gsutil >/dev/null 2>&1 || die "Couldn't find gsutil. Is the Google Cloud SDK installed?"
  if [[ -z ${PSSH} ]]; then
    die "Couldn't find pssh or parallel-ssh"
  fi
  if [ ! -f ${GCLOUD_SSH_KEY} ]; then
    die "Couldn't find Google Cloud SSH key in ${GCLOUD_SSH_KEY}"
  fi
  #[[ ! -z ${GOOGLE_CREDENTIALS+x} ]] ||
  #  die 'GOOGLE_CREDENTIALS must be set to the contents of your GCE JSON credentials file.'
  [[ ! -z ${GOOGLE_PROJECT+x} ]] ||
    die 'GOOGLE_PROJECT must be set to the name of your GCE project.'
  [[ -d "${TERRAFORM_DIR}" ]] ||
    die "Couldn't find your CockroachDB repo"
  [ ! -z ${CC_PREFIX+x} ] || die '$CC_PREFIX must be set'
}

# print_tf_args prints the Terraform arguments for the given Terraform command to
# stdout.
print_tf_args() {
  local cmd="$1"
  local state_path=""
  state_file="${CC_PREFIX}.tfstate"

  case $cmd in
  apply)
    echo "-var=prefix=${CC_PREFIX} -state=${state_file} -var=stores=--store=data0 -input=false"
    ;;
  output)
    echo "-state=${state_file}"
    ;;
  destroy)
    echo "--force -state=${state_file} -input=false"
    ;;
  default)
    die "Unknown Terraform command '$cmd'"
    ;;
  esac
}

# pssh_cluster runs the given commands across the cluster using parallel SSH.
# It expects the following parameters:
#   $1: name of output variable 
#   $2...: parameters / commands to pass to pssh
pssh_cluster() {
  output_field="$1"
  local tf_args="$(print_tf_args output)"
  local ips=$(cd "${TERRAFORM_DIR}" && terraform output ${tf_args} ${output_field} | tr ',' ' ')
  (set -x; "${PSSH}" ${PSSH_FLAGS} -H "${ips}" ${@:2})
}

# run_clusterctl runs a replica allocator test that sets up a test cluster,
# downloads archived store(s) to the cluster, resizes the cluster to the
# specified target, and waits for the cluster to be rebalanced.
clusterctl() {
  verify_environment

  case $1 in
  admin)
    local tf_args=$(print_tf_args output)
    local ip=$(cd "${TERRAFORM_DIR}" && terraform output ${tf_args} "${OUTVAR_COCKROACH_IPS}" | tr ',' ' ' | awk '{print $1}')
    open "http://${ip}:8080/"
    ;;
  create)
    clusterctl resize ${@:2}
    ;;
  copy_logs)
    echo "* Copying CockroachDB logs"
    local tf_args="$(print_tf_args output)"
    local cockroach_ips=$(cd "${TERRAFORM_DIR}" && terraform output ${tf_args} ${OUTVAR_COCKROACH_IPS} | tr ',' ' ')
    local block_writer_ips=$(cd "${TERRAFORM_DIR}" && terraform output ${tf_args} ${OUTVAR_BLOCK_WRITER_IPS} | tr ',' ' ')
    local logs_dir="${CC_PREFIX}-logs-$(date +%Y%m%d-%H%M%S)"
    echo "* Copying logs to ./${logs_dir}"
    mkdir "${logs_dir}"
    local node_id=0
    for ip in ${cockroach_ips}; do
      node_id=$((node_id+1))
      (set -x; scp ${SCP_FLAGS} -Cpr ubuntu@${ip}:logs "${logs_dir}/${node_id}")
    done
    for ip in ${block_writer_ips}; do
      node_id=$((node_id+1))
      (set -x; scp ${SCP_FLAGS} -Cpr ubuntu@${ip}:logs "${logs_dir}/block_writer")
    done
    ;;
  destroy)
    echo "* Destroying cluster"
    local tf_args="$(print_tf_args destroy)"
    (set -x; cd "${TERRAFORM_DIR}" && terraform destroy ${tf_args}) || die 'failed to destroy'
    ;;
  download_stores)
    # Note that the URL should point to a directory in GCS, because that
    # directory contains a .tgz file for each store.
    if [[ $# -ne 2 ]]; then
      die "download_stores requires the destination GCS URL as its parameter"
    fi
    local src_url="$2"

    clusterctl verify_down
    echo "* Downloading stores on every node"
    pssh_cluster ${OUTVAR_COCKROACH_IPS} --timeout 14400 ./nodectl download "${src_url}"
    ;;
  resize)
    # Creates a test cluster with the specified number of nodes and a single,
    # initially inactive block_writer machine.
    if [ $# -ne 2 ]; then
      die "syntax: $0 $1 number_of_nodes"
    fi
    echo "* Creating / resizing cluster to $2 nodes"
    local tf_args="$(print_tf_args apply)"
    (set -x; cd "${TERRAFORM_DIR}" && terraform apply ${tf_args} -var=num_instances=$2 -var=example_block_writer_instances=1) || \
    die "failed to apply Terraform config"
    ;;
  push_cockroach)
    # Pushes a custom CockroachDB binary and restarts CockroachDB.
    clusterctl stop_cockroach
    clusterctl verify_down

    # Copy the binary to GCS, then have all nodes download the binary in parallel.
    if [ $# -ne 2 ]; then
      die 'path to cockroach binary must be specified'
    fi
    local src="$2"
    local date="$(date +%Y%m%d-%H%M%S)"
    local user="${USER}"
    local basename="cockroach-${user}-${date}"
    local temp_url="${GCS_TEMP_URL}/${basename}"
    echo "* Copying binary to temp file"
    (set -x; gsutil cp -Z "${src}" "${temp_url}")
    echo "* Downloading temp file on all nodes"
    pssh_cluster ${OUTVAR_COCKROACH_IPS} "gsutil cp ${temp_url} . && ln -vsf ${basename} cockroach && chmod +x cockroach"

    clusterctl start_cockroach
    ;;
  ssh_node)
    if [[ $# -ne 2 ]]; then
      die "ssh_node takes the CockroachDB node ID as its only argument"
    fi
    local node_num="$2"
    local tf_args=$(print_tf_args output)
    local ip=$(cd "${TERRAFORM_DIR}" && terraform output ${tf_args} "${OUTVAR_COCKROACH_IPS}" | tr ',' ' ' | awk "{print \$$2}")
    if [[ -z $ip ]]; then
      die "Couldn't find IP address for node ${node_num}"
    fi
    ssh ${SSH_FLAGS} ubuntu@${ip}
    ;;
  ssh_block_writer)
    local tf_args=$(print_tf_args "output")
    ip=$(cd "${TERRAFORM_DIR}" && terraform output ${tf_args} ${OUTVAR_BLOCK_WRITER_IPS} | tr ',' ' ' | awk '{print $1}')
    ssh ${SSH_FLAGS} ubuntu@${ip}
    ;;
  ssh_photos)
    clusterctl ssh_block_writer
    ;;
  start_block_writer)
    pssh_cluster ${OUTVAR_BLOCK_WRITER_IPS} "supervisorctl -c supervisor.conf start block_writer"
    ;;
  start_cockroach)
    pssh_cluster ${OUTVAR_COCKROACH_IPS} "supervisorctl -c supervisor.conf start cockroach"
    ;;
  start_photos)
    pssh_cluster "${OUTVAR_BLOCK_WRITER_IPS}" "supervisorctl -c supervisor.conf start photos"
    ;;
  stop_cockroach)
    echo "* Stopping CockroachDB"
    pssh_cluster ${OUTVAR_COCKROACH_IPS} --timeout 60 "supervisorctl -c supervisor.conf stop cockroach"
    ;;
  stop_block_writer)
    pssh_cluster ${OUTVAR_BLOCK_WRITER_IPS} "supervisorctl -c supervisor.conf stop block_writer"
    ;;
  stop_photos)
    pssh_cluster "${OUTVAR_BLOCK_WRITER_IPS}" "supervisorctl -c supervisor.conf stop photos"
    ;;
  upload_stores)
    # Note that the URL should point to a directory in GCS, because that
    # directory contains a .tgz file for each store.
    echo "* Uploading stores from each node"
    if [[ $# -ne 2 ]]; then
      die "upload_stores requires the destination GCS URL as its parameter"
    fi
    local dest_url="$2"

    clusterctl verify_down
    pssh_cluster ${OUTVAR_COCKROACH_IPS} --timeout 86400 "./nodectl upload ${dest_url}"
    ;;
  verify_down)
    echo "* Verifying CockroachDB is down"
    pssh_cluster ${OUTVAR_COCKROACH_IPS} 'pidof cockroach >/dev/null; if [[ $? -eq 0 ]]; then echo "CockroachDB is still running but is not supposed to be!"; exit 1; fi'
    ;;
  verify_up)
    echo "* Verifying CockroachDB is up"
    pssh_cluster ${OUTVAR_COCKROACH_IPS} "./cockroach sql -e 'SELECT 1' >/dev/null || (echo 'CockroachDB is DOWN'; /bin/false)"
    ;;
  *)
    die "Unknown command. Consult the source for valid commands."
    ;;
  esac
}

clusterctl "$@"
